name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    # Serviços extras (Postgres) para testes de integração, se necessário
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: pms
          POSTGRES_PASSWORD: pms
          POSTGRES_DB: pms
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U pms"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1) Checkout do código
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Cache do npm
      - name: Cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      # 3) Instalar dependências
      - name: Install dependencies
        run: npm ci

      # 4) Lint (opcional, se tiver ESLint configurado)
      # - name: Lint
      #   run: npm run lint

      # 5) Testes
      - name: Run tests
        env:
          NODE_ENV: test
          DB_URL: sqlite::memory:
        run: npm test -- --runInBand --ci --reporters=default --reporters=jest-junit

      # 6) Build TypeScript
      - name: Build
        run: npm run build

      # 7) (Opcional) Build Docker image e publicar no GHCR
      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #
      # - name: Build and push image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: ghcr.io/${{ github.repository }}:latest